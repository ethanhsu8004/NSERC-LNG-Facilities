} else{
# V30 GRAVITE version
url.name = paste0(vnfv30.url.pfx[1],
gsub('-', '', vnf.dates[d]), vnfv30.url.pfx[2])
gz.name = paste0(data.dir, 'ef_vnf/raw/', basename(url.name))
}
# get CSV name for unzipped file
csv.name = gsub(".gz", "", gz.name)
# download & process ----
# try to download the file, error handler in case of no data
tryCatch({
# message indicating date being downloaded
cat("[", as.character(vnf.dates[d]),'] download. ', sep='')
# downloads the file ----
download.file(url.name, gz.name,
mode = 'wb', quiet = TRUE,
headers = list(Authorization = auth))
# unzips GZ, keeps the CSV, removes the GZ
R.utils::gunzip(gz.name, overwrite = TRUE)
# process
cat('process. ', sep='')
# process the file ----
vnf.temp = fread(csv.name) %>%
rename_all(tolower) %>% # rename all columns to lowercase for convenience
select(all_of(vnf.cols)) %>% # collect relevant columns
na_if(999999) %>% # replace 999999 as missing
filter(!is.na(temp_bb)) %>% # keep those not missing temperature
# generate unique VNF_ID and valid date-format date column
mutate(vnf_id = paste0('VNF', gsub('-','',vnf.dates[d]), sprintf('%06d', 1:nrow(.))),
date = as.Date(substr(date_mscan, 1, 10), format = "%Y/%m/%d"),
file_date = vnf.dates[d]) %>%
# collect and rename certain columns, and drop a few
select(vnf_id, date, lon = lon_gmtco, lat = lat_gmtco,
everything(), -date_mscan) %>%
# filter by lat & lon bounds (bbox)
filter(lon >= lon_bounds[1], lon <= lon_bounds[2],
lat >= lat_bounds[1], lat <= lat_bounds[2])
# delete CSV file
file.remove(csv.name)
# report time took t to download and process ----
cat(difftime(Sys.time(), start_time, units='secs') %>% ceiling(),
" secs.\r", sep='')
}, error = function(e){
print(e)
})
# append to existing data
vnf = rbindlist(
list(vnf,
vnf.temp))
# output every 50 days. updating every day would be pretty slow
if(d %% 50 == 0 | d == length(vnf.dates)){
saveRDS(vnf, paste0(data.dir, "ef_vnf/ef-vnf.rds"))
}
}
pb.vnf = paste0(data.dir, "pb_vnf/pb-vnf.rds") %>% readRDS() %>%
# Filter for detections with strongest confidence (cloud mask = 0)
filter(cloud_mask == 0) %>%
# select and rename some columns
dplyr::select(vnf_id, date, vnf_lon = lon, vnf_lat = lat,
temp_bb, area_bb, rhi) %>%
filter(!(date < "2016-01-01"))
ef.vnf = paste0(data.dir, "ef_vnf/ef-vnf.rds") %>% readRDS() %>%
# Filter for detections with strongest confidence (cloud mask = 0)
filter(cloud_mask == 0) %>%
# select and rename some columns
dplyr::select(vnf_id, date, vnf_lon = lon, vnf_lat = lat,
temp_bb, area_bb, rhi) %>%
filter(!(date < "2016-01-01"))
data.dir = paste0(getwd(), '/data/')
code.dir = paste0(getwd())
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
library(dplyr)
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
library(dplyr)
library(httr)
library(jsonlite)
library(utils)
pkgs = c('data.table', 'R.utils', 'sf', 'tidyverse')
for(p in pkgs) require(p, character.only = TRUE)
rm(p, pkgs)
code.dir = paste0(getwd())
data.dir = paste0(getwd(), '/data/')
#EAGLE FORD!
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp") %>%
filter((Basin %in% c("Western Gulf"))) %>%
st_bbox()
ef_bbox = st_read("../JerryData/shapes/ShalePlays_US_EIA_Dec2021.shp")
library(dplyr)
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
library(dplyr)
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
non_eia_pb <- readRDS("JerryData/pb_vnf/pb-vnf.rds")
draft_file <- file.choose()
x <- readRDS(draft_file)
View(x)
test <- x %>% filter(date <= "2017-01-01")
library(dplyr)
test <- x %>% filter(date <= "2017-01-01")
library(dplyr)
non_eia_ef <- readRDS("JerryData/ef_vnf/ef-vnf.rds")
#Processing the LNG Facilities,
#What will be processed
#Removing Temperature <= 1600k and only wanting cloud_mask == 0 and applying DBSCAN
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
setwd("~/Desktop/Current School Stuff/NSERC Files/LPG Facilities/Processing")
#Processing the LNG Facilities,
#What will be processed
#Removing Temperature <= 1600k and only wanting cloud_mask == 0 and applying DBSCAN
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
library(sf)
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
FreePort_Raw <- readRDS('../Extracting/FreePort/FP_vnf_raw.rds')
FreePort_Raw$Facility <- "FreePort"
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
View(Data)
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud))
library(dplyr)
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud))
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
View(Data)
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
FreePort_Raw <- readRDS('../Extracting/FreePort/FP_vnf_raw.rds')
FreePort_Raw$Facility <- "FreePort"
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
Data$longitude <- Data$lon
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
class(Data$date)
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326) %>% as.dataframe()
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326) %>% as.data.frame()
Data.clust.list <- Data %>% mutate(year = year(date))
class(Data$date)
x = year(Data$date)
library(lubridate)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
#Processing the LNG Facilities,
#What will be processed
#Removing Temperature <= 1600k and only wanting cloud_mask == 0 and applying DBSCAN
library(sf)
library(dplyr)
library(lubridate)
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
FreePort_Raw <- readRDS('../Extracting/FreePort/FP_vnf_raw.rds')
FreePort_Raw$Facility <- "FreePort"
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
Data.clust.list <- split(Data.clust.list, list(Data.clust.list$Facility, Data.clust.list$year))
minpts.grid = 3:8
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
print(m)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
library(dbscan)
minpts.grid = 3:8
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
print(m)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
library(data.table)
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
print(m)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
View(Data.clust.list)
View(Data)
#Processing the LNG Facilities,
#What will be processed
#Removing Temperature <= 1600k and only wanting cloud_mask == 0 and applying DBSCAN
library(sf)
library(dplyr)
library(lubridate)
library(dbscan)
library(data.table)
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
FreePort_Raw <- readRDS('../Extracting/FreePort/FP_vnf_raw.rds')
FreePort_Raw$Facility <- "FreePort"
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
# Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
Data <- CorpusChristi_Raw
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
Data.clust.list <- split(Data.clust.list, list(Data.clust.list$Facility, Data.clust.list$year))
minpts.grid = 3:8
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
print(m)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
# Data <- CorpusChristi_Raw
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
Data.clust.list <- split(Data.clust.list, list(Data.clust.list$Facility, Data.clust.list$year))
minpts.grid = 3:8
View(Data.clust.list)
#Processing the LNG Facilities,
#What will be processed
#Removing Temperature <= 1600k and only wanting cloud_mask == 0 and applying DBSCAN
library(sf)
library(dplyr)
library(lubridate)
library(dbscan)
library(data.table)
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
FreePort_Raw <- readRDS('../Extracting/FreePort/FP_vnf_raw.rds')
FreePort_Raw$Facility <- "FreePort"
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
# Data <- CorpusChristi_Raw
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
Data.clust.list <- split(Data.clust.list, list(Data.clust.list$Facility, Data.clust.list$year))
minpts.grid = 3:8
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
if (c == 2){
break
}
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
print(m)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
# Data <- CorpusChristi_Raw
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
#Processing the LNG Facilities,
#What will be processed
#Removing Temperature <= 1600k and only wanting cloud_mask == 0 and applying DBSCAN
library(sf)
library(dplyr)
library(lubridate)
library(dbscan)
library(data.table)
Freeport_coordinates <- data.frame(longitude = -95.3271224,latitude = 28.9266713)
Freeport_coordinates <- st_as_sf(Freeport_coordinates, coords = c("longitude", "latitude"), crs = 4326)
FreePort_Raw <- readRDS('../Extracting/FreePort/FP_vnf_raw.rds')
FreePort_Raw$Facility <- "FreePort"
CorpusChristi_Raw <- readRDS("../Extracting/CorpusChristi/CC_vnf_raw.rds")
CorpusChristi_Raw$Facility <- "Corpus Christi"
# FreePort_Raw$longitude <- FreePort_Raw$lon
# FreePort_Raw$latitude <- FreePort_Raw$lat
Data <- rbind(CorpusChristi_Raw, FreePort_Raw)
# Data <- CorpusChristi_Raw
Data$longitude <- Data$lon
Data$latitude <- Data$lat
Data <- Data %>% select(-file_date, -temp_bkg) %>% filter(!is.na(cloud_mask))
Data <- st_as_sf(Data, coords = c("longitude", "latitude"), crs = 4326)
Data.clust.list <- Data %>% mutate(year = year(date))  %>% as.data.frame()
Data.clust.list <- split(Data.clust.list, list(Data.clust.list$Facility, Data.clust.list$year))
minpts.grid = 3:8
for(c in 1:length(Data.clust.list)){
curr.vnf.year.minpts = NA
curr.vnf.year.noises = NA
curr.vnf.year.clusts = NA
if (c == 2){
next
}
for(m in 1:length(minpts.grid)){
curr.hdbscan = hdbscan(
x = dplyr::select(Data.clust.list[[c]], lon, lat),
minPts = minpts.grid[m]
)
print(m)
gc(); gc(reset = TRUE)
if(is.na(curr.vnf.year.noises)) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
} else if(sum(curr.hdbscan$cluster == 0) < curr.vnf.year.noises) {
curr.vnf.year.minpts = minpts.grid[m]
curr.vnf.year.noises = sum(curr.hdbscan$cluster == 0)
curr.vnf.year.clusts = ifelse(curr.hdbscan$cluster > 0, "Yes", "No")
curr.vnf.value = curr.hdbscan$cluster
}}
Data.clust.list[[c]] = data.table(
vnf_id = Data.clust.list[[c]]$vnf_id,
clustered = curr.vnf.year.clusts, value = curr.vnf.value)
rm(list = ls(pattern = "curr")); gc(); gc(reset = TRUE)
}
View(Data.clust.list)
Facilities_Data <- Data.clust.list[[1]]
Facilities_Data
for (x in 2:length(Facilities_Data)){
if (x == 2){
next
}
Facilities_Data <- merge(Facilities_Data, Data.clust.list[[x]])
}
Facilities_Data <- Data.clust.list[[1]]
for (x in 2:length(Facilities_Data)){
if (x == 2){
next
}
Facilities_Data <- merge(Facilities_Data, Data.clust.list[[x]], by = "vnf_id")
}
Facilities_Data <- Data.clust.list[[1]]
for (x in 2:length(Facilities_Data)){
if (x == 2){
next
}
print(x)
Facilities_Data<- merge(Facilities_Data, Data.clust.list[[x]], by = "vnf_id")
}
for (x in 2:length(Data.clust.list)){
if (x == 2){
next
}
print(x)
Facilities_Data<- merge(Facilities_Data, Data.clust.list[[x]], by = "vnf_id")
}
Facilities_Data <- Data.clust.list[[1]]
View(Facilities_Data)
Facilities_Data <- Data.clust.list[[1]]
for (x in 2:length(Data.clust.list)){
if (x == 2){
next
}
print(x)
Facilities_Data<- merge(Facilities_Data, Data.clust.list[[x]], all = TRUE)
}
View(Facilities_Data)
Facilities_Data_Final <- merge(Data, Facilities_Data, by = "vnf_id" )
View(Facilities_Data_Final)
saveRDS(Facilities_Data_Final, "Data/LPG_Facilities.rds")
setwd("~/Desktop/Current School Stuff/NSERC Files/LPG Facilities/Processing")
saveRDS(Facilities_Data_Final, "Data/LPG_Facilities.rds")
saveRDS(Facilities_Data_Final, "../Data/LPG_Facilities.rds")
